{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\n\n/**\n * Service to interact with the `window` object (or its equivalent on a server platform).\n */\nclass WindowService {\n  constructor(_doc) {\n    this._doc = _doc;\n  }\n  get nativeWindow() {\n    return this._doc?.defaultView || window;\n  }\n}\nWindowService.ɵfac = function WindowService_Factory(t) {\n  return new (t || WindowService)(i0.ɵɵinject(DOCUMENT));\n};\nWindowService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: WindowService,\n  factory: WindowService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WindowService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * Cookie Consent configuration object.\n */\nclass NgcCookieConsentConfig {\n  constructor() {\n    /**\n     * If false, this prevents the popup from showing (useful for giving to control to another piece of code)\n     */\n    this.enabled = true;\n    /**\n     * Simple whitelist for pages. specify page by:\n     * - using a string : '/index.html'           (matches '/index.html' exactly) OR\n     * - using RegExp   : /\\/page_[\\d]+\\.html/    (matched '/page_1.html' and '/page_2.html' etc)\n     *\n     */\n    this.whitelistPage = [];\n    /**\n     * Simple blacklist for pages. specify page by:\n     * - using a string : '/index.html'           (matches '/index.html' exactly) OR\n     * - using RegExp   : /\\/page_[\\d]+\\.html/    (matched '/page_1.html' and '/page_2.html' etc)\n     *\n     */\n    this.blacklistPage = [];\n  }\n}\nNgcCookieConsentConfig.ɵfac = function NgcCookieConsentConfig_Factory(t) {\n  return new (t || NgcCookieConsentConfig)();\n};\nNgcCookieConsentConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgcCookieConsentConfig,\n  factory: NgcCookieConsentConfig.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgcCookieConsentConfig, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * Service to interact with Cookie Consent API.\n */\nclass NgcCookieConsentService {\n  constructor(windowService, config) {\n    // Observable  sources\n    this.popupOpenSource = new Subject();\n    this.popupCloseSource = new Subject();\n    this.initializingSource = new Subject();\n    this.initializedSource = new Subject();\n    this.initializationErrorSource = new Subject();\n    this.statusChangeSource = new Subject();\n    this.revokeChoiceSource = new Subject();\n    this.noCookieLawSource = new Subject();\n    // Observable  streams\n    this.popupOpen$ = this.popupOpenSource.asObservable();\n    this.popupClose$ = this.popupCloseSource.asObservable();\n    this.initializing$ = this.initializingSource.asObservable();\n    this.initialized$ = this.initializedSource.asObservable();\n    this.initializationError$ = this.initializationErrorSource.asObservable();\n    this.statusChange$ = this.statusChangeSource.asObservable();\n    this.revokeChoice$ = this.revokeChoiceSource.asObservable();\n    this.noCookieLaw$ = this.noCookieLawSource.asObservable();\n    this.window = windowService.nativeWindow;\n    this.init(config);\n  }\n  checkPopupInstantiated(method) {\n    if (this.popupInstance == null) {\n      throw new Error(`Cookie popup has not yet been instantiated. Cannot invoke ${method}()`);\n    }\n  }\n  /**\n   * Initializes Cookie Consent with the provided configuration.\n   * @param config the configuration object\n   */\n  init(config) {\n    if (this.window && this.window.cookieconsent) {\n      // For Angular Universal suport\n      this.cookieconsent = this.window.cookieconsent;\n      this.config = config;\n      // Set callbacks hooks:\n      this.config.onPopupOpen = () => this.popupOpenSource.next();\n      this.config.onPopupClose = () => this.popupCloseSource.next();\n      this.config.onInitialise = status => this.initializingSource.next({\n        status: status\n      });\n      this.config.onStatusChange = (status, chosenBefore) => {\n        this.statusChangeSource.next({\n          status: status,\n          chosenBefore: chosenBefore\n        });\n      };\n      this.config.onRevokeChoice = () => this.revokeChoiceSource.next();\n      this.config.onNoCookieLaw = (countryCode, country) => {\n        this.noCookieLawSource.next({\n          countryCode: countryCode,\n          country: country\n        });\n      };\n      // Init the cookieconsent library with injected config\n      this.cookieconsent.initialise(this.config, popup => {\n        this.popupInstance = popup;\n        this.initializedSource.next(); //notify of successful initialization\n      }, (error, popup) => {\n        this.initializationErrorSource.next({\n          error: error\n        }); //notify of failed initialization\n      });\n    }\n  }\n  /**\n   * Gets the current configuration  used by the Cookie Consent.\n   */\n  getConfig() {\n    return this.config;\n  }\n  /**\n   * Gets the current cookie status.\n   */\n  getStatus() {\n    return this.cookieconsent.status;\n  }\n  /**\n   * Gets the current browser support for translations\n   */\n  getTransition() {\n    return this.cookieconsent.hasTransition;\n  }\n  /**\n   * Clears the current cookie status.\n   */\n  clearStatus() {\n    this.checkPopupInstantiated('clearStatus');\n    return this.popupInstance.clearStatus();\n  }\n  open() {\n    this.checkPopupInstantiated('open');\n    return this.popupInstance.open();\n  }\n  close(showRevoke) {\n    this.checkPopupInstantiated('close');\n    return this.popupInstance.close(showRevoke);\n  }\n  destroy() {\n    this.checkPopupInstantiated('destroy');\n    this.popupInstance.destroy();\n  }\n  fadeIn() {\n    this.checkPopupInstantiated('fadeIn');\n    this.popupInstance.fadeIn();\n  }\n  fadeOut() {\n    this.checkPopupInstantiated('fadeOut');\n    this.popupInstance.fadeOut();\n  }\n  isOpen() {\n    this.checkPopupInstantiated('isOpen');\n    return this.popupInstance.isOpen();\n  }\n  toggleRevokeButton(show) {\n    this.checkPopupInstantiated('toggleRevokeButton');\n    this.popupInstance.toggleRevokeButton(show);\n  }\n  hasAnswered() {\n    this.checkPopupInstantiated('hasAnswered');\n    return this.popupInstance.hasAnswered();\n  }\n  hasConsented() {\n    this.checkPopupInstantiated('hasConsented');\n    return this.popupInstance.hasConsented();\n  }\n}\nNgcCookieConsentService.ɵfac = function NgcCookieConsentService_Factory(t) {\n  return new (t || NgcCookieConsentService)(i0.ɵɵinject(WindowService), i0.ɵɵinject(NgcCookieConsentConfig));\n};\nNgcCookieConsentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgcCookieConsentService,\n  factory: NgcCookieConsentService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgcCookieConsentService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: WindowService\n    }, {\n      type: NgcCookieConsentConfig\n    }];\n  }, null);\n})();\n\n/**\n * Main module of the library\n */\nclass NgcCookieConsentModule {\n  static forRoot(config) {\n    return {\n      ngModule: NgcCookieConsentModule,\n      providers: [WindowService, {\n        provide: NgcCookieConsentConfig,\n        useValue: config\n      }, NgcCookieConsentService]\n    };\n  }\n}\nNgcCookieConsentModule.ɵfac = function NgcCookieConsentModule_Factory(t) {\n  return new (t || NgcCookieConsentModule)();\n};\nNgcCookieConsentModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgcCookieConsentModule\n});\nNgcCookieConsentModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgcCookieConsentModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Palette Options\n *\n * Colours can be defined in additional stylesheets or using attributes.\n */\nclass NgcPaletteOptions {\n  constructor() {\n    this.popup = {\n      background: '#000000',\n      text: '#fff',\n      link: '#fff'\n    };\n    this.button = {\n      background: 'transparent',\n      border: '#f8e71c',\n      text: '#f8e71c'\n    };\n    this.highlight = {\n      background: '#f8e71c',\n      border: '#f8e71c',\n      text: '#000000'\n    };\n  }\n}\n\n/* tslint:disable:max-line-length */\n/**\n * Location Options\n *\n * The location services are disabled by default. You are encouraged to implement a handler to your own service, rather than using the free ones provided.\n * To enable the basic location services, set 'location' to 'true'. To add you own services or configure the order or execution, pass an object with configuration properties.\n */\nclass NgcLocationOptions {\n  constructor() {\n    /**\n     * We can't react to errors from script tag resources, so we set a timeout. If we don't have the answer after 5000ms, try the next service.\n     * Default: 5000 (milliseconds)\n     */\n    this.timeout = 5000;\n    /**\n     * This array defines the services that you want to use. We attempt to get the country code from the first service, and only if the service fails do we move onto the next service.\n     * If all services fail, the popup is opened without modification.\n     * If a service succeeds, then the two letter country code is passed to the 'Law' module, with changes your popup options depending on the cookie laws in the country code.\n     * Default: ['freegeoip', 'ipinfo', 'maxmind']\n     */\n    this.services = ['freegeoip', 'ipinfo', 'maxmind'];\n  }\n}\n\n/**\n * Law Optons.\n */\nclass NgcLawOptions {\n  constructor() {\n    // If false, then we only enable the popup if the country has the cookie law. We ignore all other country specific rules.\n    // Default: true\n    this.regionalLaw = true;\n  }\n}\n\n/* tslint:disable:max-line-length */\n/**\n * HTML Elements\n */\nclass NgcHTMLElements {\n  constructor() {\n    this.header = '<span class=\"cc-header\">{{header}}</span>&nbsp;';\n    this.message = '<span id=\"cookieconsent:desc\" class=\"cc-message\">{{message}}</span>';\n    this.messagelink = '<span id=\"cookieconsent:desc\" class=\"cc-message\">{{message}} <a aria-label=\"learn more about cookies\" tabindex=\"0\" class=\"cc-link\" href=\"{{href}}\" target=\"_blank\" rel=\"noopener\">{{link}}</a></span>';\n    this.dismiss = '<a aria-label=\"dismiss cookie message\" tabindex=\"0\" class=\"cc-btn cc-dismiss\">{{dismiss}}</a>';\n    this.allow = '<a aria-label=\"allow cookies\" tabindex=\"0\" class=\"cc-btn cc-allow\">{{allow}}</a>';\n    this.deny = '<a aria-label=\"deny cookies\" tabindex=\"0\" class=\"cc-btn cc-deny\">{{deny}}</a>';\n    this.link = '<a aria-label=\"learn more about cookies\" tabindex=\"0\" class=\"cc-link\" href=\"{{href}}\" target=\"_blank\" rel=\"noopener\">{{link}}</a>';\n    this.close = '<span aria-label=\"dismiss cookie message\" tabindex=\"0\" class=\"cc-close\">{{close}}</span>';\n  }\n}\n\n/**\n * Cookie Options.\n *\n * It is recommended to set these values to correspond with your server.\n * You MUST set the ‘domain’ option, otherwise your cookies may not work.\n */\nclass NgcCookieOptions {\n  constructor() {\n    // Name of the cookie that keeps track of users choice\n    // Default: 'cookieconsent_status'\n    this.name = 'cookieconsent_status';\n    // URL path that the cookie 'name' belongs to. The cookie can only be read at this location\n    // Default: '/'\n    this.path = '/';\n    // The domain that the cookie 'name' belongs to. The cookie can only be read on this domain. Guide to cookie domains\n    // Default: <empty string>\n    this.domain = '';\n    // The cookies expire date, specified in days (specify -1 for no expiry)\n    // Default: 365\n    this.expiryDays = 365;\n    // If true the cookie will be created with the secure flag. Secure cookies will only be transmitted via HTTPS.\n    this.secure = false;\n  }\n}\n\n/**\n * Content Options.\n *\n * Text strings used for cookie consent window elements.\n */\nclass NgcContentOptions {\n  constructor() {\n    this.header = 'Cookies used on the website!';\n    this.message = 'This website uses cookies to ensure you get the best experience on our website.';\n    this.dismiss = 'Got it!';\n    this.allow = 'Allow cookies';\n    this.deny = 'Decline';\n    this.link = 'Learn more';\n    this.href = 'https://cookiesandyou.com';\n    this.close = '&#x274c;';\n    this.policy = 'Cookie Policy';\n    this.target = '_blank';\n  }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgcContentOptions, NgcCookieConsentConfig, NgcCookieConsentModule, NgcCookieConsentService, NgcCookieOptions, NgcHTMLElements, NgcLawOptions, NgcLocationOptions, NgcPaletteOptions, WindowService };","map":{"version":3,"names":["i0","Injectable","Inject","NgModule","DOCUMENT","CommonModule","Subject","WindowService","constructor","_doc","nativeWindow","defaultView","window","ɵfac","WindowService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","Document","decorators","args","NgcCookieConsentConfig","enabled","whitelistPage","blacklistPage","NgcCookieConsentConfig_Factory","NgcCookieConsentService","windowService","config","popupOpenSource","popupCloseSource","initializingSource","initializedSource","initializationErrorSource","statusChangeSource","revokeChoiceSource","noCookieLawSource","popupOpen$","asObservable","popupClose$","initializing$","initialized$","initializationError$","statusChange$","revokeChoice$","noCookieLaw$","init","checkPopupInstantiated","method","popupInstance","Error","cookieconsent","onPopupOpen","next","onPopupClose","onInitialise","status","onStatusChange","chosenBefore","onRevokeChoice","onNoCookieLaw","countryCode","country","initialise","popup","error","getConfig","getStatus","getTransition","hasTransition","clearStatus","open","close","showRevoke","destroy","fadeIn","fadeOut","isOpen","toggleRevokeButton","show","hasAnswered","hasConsented","NgcCookieConsentService_Factory","NgcCookieConsentModule","forRoot","ngModule","providers","provide","useValue","NgcCookieConsentModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","NgcPaletteOptions","background","text","link","button","border","highlight","NgcLocationOptions","timeout","services","NgcLawOptions","regionalLaw","NgcHTMLElements","header","message","messagelink","dismiss","allow","deny","NgcCookieOptions","name","path","domain","expiryDays","secure","NgcContentOptions","href","policy","target"],"sources":["C:/Users/ALEX-/Desktop/Procramas/Leyenda/Leyenda/node_modules/ngx-cookieconsent/fesm2020/ngx-cookieconsent.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Inject, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\n\n/**\n * Service to interact with the `window` object (or its equivalent on a server platform).\n */\nclass WindowService {\n    constructor(_doc) {\n        this._doc = _doc;\n    }\n    get nativeWindow() {\n        return this._doc?.defaultView || window;\n    }\n}\nWindowService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.5\", ngImport: i0, type: WindowService, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nWindowService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.5\", ngImport: i0, type: WindowService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.5\", ngImport: i0, type: WindowService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * Cookie Consent configuration object.\n */\nclass NgcCookieConsentConfig {\n    constructor() {\n        /**\n         * If false, this prevents the popup from showing (useful for giving to control to another piece of code)\n         */\n        this.enabled = true;\n        /**\n         * Simple whitelist for pages. specify page by:\n         * - using a string : '/index.html'           (matches '/index.html' exactly) OR\n         * - using RegExp   : /\\/page_[\\d]+\\.html/    (matched '/page_1.html' and '/page_2.html' etc)\n         *\n         */\n        this.whitelistPage = [];\n        /**\n         * Simple blacklist for pages. specify page by:\n         * - using a string : '/index.html'           (matches '/index.html' exactly) OR\n         * - using RegExp   : /\\/page_[\\d]+\\.html/    (matched '/page_1.html' and '/page_2.html' etc)\n         *\n         */\n        this.blacklistPage = [];\n    }\n}\nNgcCookieConsentConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.5\", ngImport: i0, type: NgcCookieConsentConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgcCookieConsentConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.5\", ngImport: i0, type: NgcCookieConsentConfig });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.5\", ngImport: i0, type: NgcCookieConsentConfig, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * Service to interact with Cookie Consent API.\n */\nclass NgcCookieConsentService {\n    constructor(windowService, config) {\n        // Observable  sources\n        this.popupOpenSource = new Subject();\n        this.popupCloseSource = new Subject();\n        this.initializingSource = new Subject();\n        this.initializedSource = new Subject();\n        this.initializationErrorSource = new Subject();\n        this.statusChangeSource = new Subject();\n        this.revokeChoiceSource = new Subject();\n        this.noCookieLawSource = new Subject();\n        // Observable  streams\n        this.popupOpen$ = this.popupOpenSource.asObservable();\n        this.popupClose$ = this.popupCloseSource.asObservable();\n        this.initializing$ = this.initializingSource.asObservable();\n        this.initialized$ = this.initializedSource.asObservable();\n        this.initializationError$ = this.initializationErrorSource.asObservable();\n        this.statusChange$ = this.statusChangeSource.asObservable();\n        this.revokeChoice$ = this.revokeChoiceSource.asObservable();\n        this.noCookieLaw$ = this.noCookieLawSource.asObservable();\n        this.window = windowService.nativeWindow;\n        this.init(config);\n    }\n    checkPopupInstantiated(method) {\n        if (this.popupInstance == null) {\n            throw new Error(`Cookie popup has not yet been instantiated. Cannot invoke ${method}()`);\n        }\n    }\n    /**\n     * Initializes Cookie Consent with the provided configuration.\n     * @param config the configuration object\n     */\n    init(config) {\n        if (this.window && this.window.cookieconsent) { // For Angular Universal suport\n            this.cookieconsent = this.window.cookieconsent;\n            this.config = config;\n            // Set callbacks hooks:\n            this.config.onPopupOpen =\n                () => this.popupOpenSource.next();\n            this.config.onPopupClose =\n                () => this.popupCloseSource.next();\n            this.config.onInitialise =\n                (status) => this.initializingSource.next({ status: status });\n            this.config.onStatusChange =\n                (status, chosenBefore) => {\n                    this.statusChangeSource.next({ status: status, chosenBefore: chosenBefore });\n                };\n            this.config.onRevokeChoice =\n                () => this.revokeChoiceSource.next();\n            this.config.onNoCookieLaw =\n                (countryCode, country) => {\n                    this.noCookieLawSource.next({ countryCode: countryCode, country: country });\n                };\n            // Init the cookieconsent library with injected config\n            this.cookieconsent.initialise(this.config, (popup) => {\n                this.popupInstance = popup;\n                this.initializedSource.next(); //notify of successful initialization\n            }, (error, popup) => {\n                this.initializationErrorSource.next({ error: error }); //notify of failed initialization\n            });\n        }\n    }\n    /**\n     * Gets the current configuration  used by the Cookie Consent.\n     */\n    getConfig() {\n        return this.config;\n    }\n    /**\n     * Gets the current cookie status.\n     */\n    getStatus() {\n        return this.cookieconsent.status;\n    }\n    /**\n     * Gets the current browser support for translations\n     */\n    getTransition() {\n        return this.cookieconsent.hasTransition;\n    }\n    /**\n     * Clears the current cookie status.\n     */\n    clearStatus() {\n        this.checkPopupInstantiated('clearStatus');\n        return this.popupInstance.clearStatus();\n    }\n    open() {\n        this.checkPopupInstantiated('open');\n        return this.popupInstance.open();\n    }\n    close(showRevoke) {\n        this.checkPopupInstantiated('close');\n        return this.popupInstance.close(showRevoke);\n    }\n    destroy() {\n        this.checkPopupInstantiated('destroy');\n        this.popupInstance.destroy();\n    }\n    fadeIn() {\n        this.checkPopupInstantiated('fadeIn');\n        this.popupInstance.fadeIn();\n    }\n    fadeOut() {\n        this.checkPopupInstantiated('fadeOut');\n        this.popupInstance.fadeOut();\n    }\n    isOpen() {\n        this.checkPopupInstantiated('isOpen');\n        return this.popupInstance.isOpen();\n    }\n    toggleRevokeButton(show) {\n        this.checkPopupInstantiated('toggleRevokeButton');\n        this.popupInstance.toggleRevokeButton(show);\n    }\n    hasAnswered() {\n        this.checkPopupInstantiated('hasAnswered');\n        return this.popupInstance.hasAnswered();\n    }\n    hasConsented() {\n        this.checkPopupInstantiated('hasConsented');\n        return this.popupInstance.hasConsented();\n    }\n}\nNgcCookieConsentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.5\", ngImport: i0, type: NgcCookieConsentService, deps: [{ token: WindowService }, { token: NgcCookieConsentConfig }], target: i0.ɵɵFactoryTarget.Injectable });\nNgcCookieConsentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.5\", ngImport: i0, type: NgcCookieConsentService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.5\", ngImport: i0, type: NgcCookieConsentService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: WindowService }, { type: NgcCookieConsentConfig }]; } });\n\n/**\n * Main module of the library\n */\nclass NgcCookieConsentModule {\n    static forRoot(config) {\n        return {\n            ngModule: NgcCookieConsentModule,\n            providers: [WindowService, { provide: NgcCookieConsentConfig, useValue: config }, NgcCookieConsentService]\n        };\n    }\n}\nNgcCookieConsentModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.5\", ngImport: i0, type: NgcCookieConsentModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgcCookieConsentModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.5\", ngImport: i0, type: NgcCookieConsentModule, imports: [CommonModule] });\nNgcCookieConsentModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.5\", ngImport: i0, type: NgcCookieConsentModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.5\", ngImport: i0, type: NgcCookieConsentModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule\n                    ]\n                }]\n        }] });\n\n/**\n * Palette Options\n *\n * Colours can be defined in additional stylesheets or using attributes.\n */\nclass NgcPaletteOptions {\n    constructor() {\n        this.popup = { background: '#000000', text: '#fff', link: '#fff' };\n        this.button = { background: 'transparent', border: '#f8e71c', text: '#f8e71c' };\n        this.highlight = { background: '#f8e71c', border: '#f8e71c', text: '#000000' };\n    }\n}\n\n/* tslint:disable:max-line-length */\n/**\n * Location Options\n *\n * The location services are disabled by default. You are encouraged to implement a handler to your own service, rather than using the free ones provided.\n * To enable the basic location services, set 'location' to 'true'. To add you own services or configure the order or execution, pass an object with configuration properties.\n */\nclass NgcLocationOptions {\n    constructor() {\n        /**\n         * We can't react to errors from script tag resources, so we set a timeout. If we don't have the answer after 5000ms, try the next service.\n         * Default: 5000 (milliseconds)\n         */\n        this.timeout = 5000;\n        /**\n         * This array defines the services that you want to use. We attempt to get the country code from the first service, and only if the service fails do we move onto the next service.\n         * If all services fail, the popup is opened without modification.\n         * If a service succeeds, then the two letter country code is passed to the 'Law' module, with changes your popup options depending on the cookie laws in the country code.\n         * Default: ['freegeoip', 'ipinfo', 'maxmind']\n         */\n        this.services = ['freegeoip', 'ipinfo', 'maxmind'];\n    }\n}\n\n/**\n * Law Optons.\n */\nclass NgcLawOptions {\n    constructor() {\n        // If false, then we only enable the popup if the country has the cookie law. We ignore all other country specific rules.\n        // Default: true\n        this.regionalLaw = true;\n    }\n}\n\n/* tslint:disable:max-line-length */\n/**\n * HTML Elements\n */\nclass NgcHTMLElements {\n    constructor() {\n        this.header = '<span class=\"cc-header\">{{header}}</span>&nbsp;';\n        this.message = '<span id=\"cookieconsent:desc\" class=\"cc-message\">{{message}}</span>';\n        this.messagelink = '<span id=\"cookieconsent:desc\" class=\"cc-message\">{{message}} <a aria-label=\"learn more about cookies\" tabindex=\"0\" class=\"cc-link\" href=\"{{href}}\" target=\"_blank\" rel=\"noopener\">{{link}}</a></span>';\n        this.dismiss = '<a aria-label=\"dismiss cookie message\" tabindex=\"0\" class=\"cc-btn cc-dismiss\">{{dismiss}}</a>';\n        this.allow = '<a aria-label=\"allow cookies\" tabindex=\"0\" class=\"cc-btn cc-allow\">{{allow}}</a>';\n        this.deny = '<a aria-label=\"deny cookies\" tabindex=\"0\" class=\"cc-btn cc-deny\">{{deny}}</a>';\n        this.link = '<a aria-label=\"learn more about cookies\" tabindex=\"0\" class=\"cc-link\" href=\"{{href}}\" target=\"_blank\" rel=\"noopener\">{{link}}</a>';\n        this.close = '<span aria-label=\"dismiss cookie message\" tabindex=\"0\" class=\"cc-close\">{{close}}</span>';\n    }\n}\n\n/**\n * Cookie Options.\n *\n * It is recommended to set these values to correspond with your server.\n * You MUST set the ‘domain’ option, otherwise your cookies may not work.\n */\nclass NgcCookieOptions {\n    constructor() {\n        // Name of the cookie that keeps track of users choice\n        // Default: 'cookieconsent_status'\n        this.name = 'cookieconsent_status';\n        // URL path that the cookie 'name' belongs to. The cookie can only be read at this location\n        // Default: '/'\n        this.path = '/';\n        // The domain that the cookie 'name' belongs to. The cookie can only be read on this domain. Guide to cookie domains\n        // Default: <empty string>\n        this.domain = '';\n        // The cookies expire date, specified in days (specify -1 for no expiry)\n        // Default: 365\n        this.expiryDays = 365;\n        // If true the cookie will be created with the secure flag. Secure cookies will only be transmitted via HTTPS.\n        this.secure = false;\n    }\n}\n\n/**\n * Content Options.\n *\n * Text strings used for cookie consent window elements.\n */\nclass NgcContentOptions {\n    constructor() {\n        this.header = 'Cookies used on the website!';\n        this.message = 'This website uses cookies to ensure you get the best experience on our website.';\n        this.dismiss = 'Got it!';\n        this.allow = 'Allow cookies';\n        this.deny = 'Decline';\n        this.link = 'Learn more';\n        this.href = 'https://cookiesandyou.com';\n        this.close = '&#x274c;';\n        this.policy = 'Cookie Policy';\n        this.target = '_blank';\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgcContentOptions, NgcCookieConsentConfig, NgcCookieConsentModule, NgcCookieConsentService, NgcCookieOptions, NgcHTMLElements, NgcLawOptions, NgcLocationOptions, NgcPaletteOptions, WindowService };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}